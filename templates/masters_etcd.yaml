AWSTemplateFormatVersion: '2010-09-09'
Description: ASG for masters

Parameters:

    EnvironmentName:
      Description: An environment name that will be prefixed to resource names
      Type: String

    InstanceType:
        Description: Which instance type should we use?
        Type: String
        Default: t2.medium

    ClusterSize:
        Description: How many instances do you want to initially deploy?
        Type: Number
        Default: 3

    MaxSize:
        Description: Maximum size of ASG?
        Type: Number
        Default: 5

    VPC:
        Description: Choose which VPC this cluster should be deployed to
        Type: AWS::EC2::VPC::Id

    Subnets:
        Description: Choose which subnets this cluster should be deployed to
        Type: List<AWS::EC2::Subnet::Id>

    SecurityGroup:
        Description: Select the Security Group to use for the instances
        Type: List<AWS::EC2::SecurityGroup::Id>

    InstanceProfile:
        Description: InstanceProfile to use
        Type: String

    KeyName:
        Description: SSH keypair name
        Type: AWS::EC2::KeyPair::KeyName

Mappings:
  RegionToAMI:
    ap-northeast-1:
      standard: ami-39e37b5f
      min: ami-62e07804
    ap-northeast-2:
      standard: ami-5295353c
      min: ami-a19737cf
    ap-south-1:
      standard: ami-05194e6a
      min: ami-3f184f50
    ap-southeast-1:
      standard: ami-6755261b
      min: ami-f657248a
    ap-southeast-2:
      standard: ami-1fe21f7d
      min: ami-f5e11c97
    ca-central-1:
      standard: ami-5984013d
      min: ami-9f8702fb
    eu-central-1:
      standard: ami-0471e36b
      min: ami-4072e02f
    eu-west-1:
      standard: ami-db51c2a2
      min: ami-8e52c1f7
    eu-west-2:
      standard: ami-22a8b046
      min: ami-18b6ae7c
    eu-west-3:
      standard: ami-680eb915
      min: ami-9001b6ed
    sa-east-1:
      standard: ami-f052109c
      min: ami-7652101a
    us-east-1:
      standard: ami-74da830e
      min: ami-ccdd84b6
    us-east-2:
      standard: ami-e782a982
      min: ami-1c8ca779
    us-west-1:
      standard: ami-1dacac7d
      min: ami-96ababf6
    us-west-2:
      standard: ami-8f08bcf7
      min: ami-7df74005

Resources:

    LaunchConfiguration:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId:  !FindInMap [RegionToAMI, !Ref "AWS::Region", min]
            InstanceType: !Ref InstanceType
            SecurityGroups: !Ref SecurityGroup
            IamInstanceProfile: !Ref InstanceProfile
            KeyName: !Ref KeyName
            UserData:
                "Fn::Base64": !Sub |
                    #!/bin/bash
                    cleanup () {
                      CODE=$?
                      exit $CODE
                    }

                    trap "cleanup" INT TERM EXIT

                    yum update -y
                    yum install -y awscli
                    yum install -y docker

                    DATA_DIR=/var/lib/etcd
                    mkdir -p $DATA_DIR

                    REGISTRY=quay.io/coreos/etcd
                    ETCD_VERSION=v3.2

                    INTERNAL_IP=$(curl -sS --retry 3 http://169.254.169.254/latest/meta-data/local-ipv4)
                    EC2_INSTANCE_ID=$(curl -sS --retry 3 http://169.254.169.254/latest/meta-data/instance-id)

                    export AWS_DEFAULT_REGION=${AWS::Region}

                    # Get ASG name the instance belong to
                    ASG_NAME=$(aws autoscaling describe-auto-scaling-instances --instance-ids $EC2_INSTANCE_ID --query AutoScalingInstances[0].AutoScalingGroupName --out text)

                    # Create query string to get all inService instances and desired state
                    QUERY="AutoScalingGroups[?AutoScalingGroupName==\`$ASG_NAME\`].{size:DesiredCapacity,instances:Instances[?LifecycleState==\`InService\`].InstanceId}"
                    DESIRED_SIZE=0
                    ACTUAL_SIZE=0

                    # Wait until ASG launch all instances with retry and back-off strategy
                    for i in `seq 1 10`
                    do
                      # Query all inService instances and desired state and get desired number of instances
                      ASG_DATA=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name $ASG_NAME --query $QUERY  --output text)
                      DESIRED_SIZE=$(echo "$ASG_DATA" | head -1)
                      ACTUAL_SIZE=$(echo "$ASG_DATA" | grep -ci instance)
                      # go out of cycle if the number of instances match the desired state
                      [ $ACTUAL_SIZE -eq $DESIRED_SIZE ] && break
                      # otherwise wait and try again
                      echo "wait till all instances are InService"
                      sleep $((i*3))
                    done

                    # Final test that ASG has been stabilized (because there are two exits from 'for' loop)
                    [ $ACTUAL_SIZE -eq $DESIRED_SIZE ] || (echo "ASG hasn't stabilized"; exit 1)

                    INSTANCES=$(echo "$ASG_DATA" | grep -i instance | awk '{print $2}')
                    ETCD_INITIAL_CLUSTER=$(aws ec2 describe-instances --instance-ids $INSTANCES --query 'Reservations[].Instances[].[InstanceId,PrivateIpAddress]' --output text | sort | awk '{ printf("%s=https://%s:2380,", $1, $2) }' | sed 's/,$//g')

                    cat > /etc/systemd/system/etcd.service <<EOF
                    [Unit]
                    Description=etcd
                    After=docker.service
                    Requires=docker.service
                    Documentation=https://github.com/coreos

                    [Service]
                    TimeoutStartSec=0
                    ExecStartPre=/usr/bin/docker pull $REGISTRY:$ETCD_VERSION
                    ExecStart=/usr/bin/docker run \\
                      -p 2379:2379 \\
                      -p 2380:2380 \\
                      --net host \\
                      --volume=$DATA_DIR:/etcd-data \\
                      --name etcd $REGISTRY:$ETCD_VERSION \\
                      /usr/local/bin/etcd \\
                        --data-dir=/etcd-data --name $EC2_INSTANCE_ID \\
                        --initial-advertise-peer-urls https://$INTERNAL_IP:2380 \\
                        --listen-peer-urls https://$INTERNAL_IP:2380 \\
                        --advertise-client-urls https://$INTERNAL_IP:2379,http://127.0.0.1:2379 \\
                        --listen-client-urls https://$INTERNAL_IP:2379,http://127.0.0.1:2379 \\
                        --initial-cluster $ETCD_INITIAL_CLUSTER \\
                        --initial-cluster-state new --initial-cluster-token $ASG_NAME \\
                        --auto-tls \\
                        --peer-auto-tls

                    ExecStop=/usr/bin/docker stop etcd
                    ExecStopPost=/usr/bin/docker rm -f etcd
                    ExecReload=/usr/bin/docker restart etcd
                    Restart=always
                    RestartSec=10
                    Type=notify
                    NotifyAccess=all

                    [Install]
                    WantedBy=multi-user.target
                    EOF


                    sudo systemctl daemon-reload
                    sudo systemctl enable docker
                    sudo systemctl start docker
                    sudo systemctl enable etcd
                    sudo systemctl start etcd

    AutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier: !Ref Subnets
            LaunchConfigurationName: !Ref LaunchConfiguration
            MinSize: !Ref ClusterSize
            MaxSize: !Ref MaxSize
            DesiredCapacity: !Ref ClusterSize
            Tags:
                - Key: Environment
                  Value: !Ref EnvironmentName
                  PropagateAtLaunch: true
                - Key: Network
                  Value: Control
                  PropagateAtLaunch: true
                - Key: Name
                  Value: !Sub '${EnvironmentName}-control-node'
                  PropagateAtLaunch: true
